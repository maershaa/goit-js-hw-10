{"mappings":"AAAA,MAKMA,EAAcC,SAASC,cAAc,iBASrCC,GANSF,SAASC,cAAc,WAGxBD,SAASC,cAAc,UAGrBD,SAASC,cAAc,cAYI,SAAlCE,EAAYC,GAECC,MAAM,uHAEvBC,MAAKC,GAAYA,EAASC,SACLF,MAAhBG,IAE4CV,EAApCW,UAAY,GAExB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IAAK,CACtC,MAAME,EAAQJ,EAAOE,GAGY,IAA5BE,EAAMC,MAAO,SAGmC,MAA/CC,EAASf,SAASgB,cAAc,UACtCD,EAAOE,MAAQN,EACfI,EAAOL,UAAYG,EAAMK,KACzBnB,EAAYoB,YAAYJ,E,CAIwB,GAA9CX,GAAW,GAAKA,EAAUK,EAAOG,OAAQ,CAC3C,MACMQ,EAed,SAAsBP,GACpB,MAAMQ,IAAEA,EAAGC,MAAEA,EAAKC,OAAEA,EAAML,KAAEA,EAAIM,YAAEA,GAAgBX,EAClD,MAAO,mCAESQ,WAAaH,aAAgBI,cAAkBC,kBACrDL,wFAEoDM,2B,CAtBzCC,CADOhB,EAAOL,IAE7BF,EAAQQ,UAAYU,C,KAKvBM,OAAMC,IACLC,QAAQC,MAAMF,EAAM,G,CAzCQ5B,EAAtB+B,iBAAiB,UAGyB,SAApCC,GAEmB5B,EADb4B,EAAIC,OAAOf,M,IA0CkBd,EAAzC","sources":["src/index.js"],"sourcesContent":["const BASE_URL = 'https://api.thecatapi.com/v1/';\nconst API_KEY =\n  'live_m6bWAmbCUpZFpjwTSQIcwzhCw2H822bRJfscfRObrB30g8VI6R23vJzjXH2DXoxA';\n\n// Выберите элемент <select> с классом \"breed-select\"\nconst breedSelect = document.querySelector('.breed-select');\n\n// Выберите элемент <p> с классом \"loader\"\nconst loader = document.querySelector('.loader');\n\n// Выберите элемент <p> с классом \"error\"\nconst error = document.querySelector('.error');\n\n// Выберите элемент <div> с классом \"cat-info\"\nconst catInfo = document.querySelector('.cat-info');\n\n// Добавьте обработчик события \"change\" к элементу breedSelect\nbreedSelect.addEventListener('change', onChoose);\n\n// Определите функцию onChoose, которая будет вызываться при выборе породы\nfunction onChoose(evt) {\n  const selectedValue = evt.target.value; // Получить выбранное значение из элемента breedSelect\n  fetchBreeds(selectedValue); // Вызвать функцию fetchBreeds с выбранным значением\n}\n\n// Определите функцию fetchBreeds для получения данных о породах\nfunction fetchBreeds(idValue) {\n  // Запрос на получение пород с использованием fetch\n  const listPromise = fetch(`${BASE_URL}breeds?x-api-key=${API_KEY}`);\n  listPromise\n    .then(response => response.json()) // Преобразование ответа в JSON\n    .then(catArr => {\n      // Очистить список пород перед добавлением новых значений\n      breedSelect.innerHTML = '';\n\n      for (let i = 0; i < catArr.length; i++) {\n        const breed = catArr[i];\n\n        // Отфильтровать породы без изображения\n        if (!breed.image) continue;\n\n        // Создать новый элемент option для каждой породы и добавить его в список\n        const option = document.createElement('option');\n        option.value = i;\n        option.innerHTML = breed.name;\n        breedSelect.appendChild(option);\n      }\n\n      // Проверить, что idValue валидно и выбрать первую породу по умолчанию\n      if (idValue >= 0 && idValue < catArr.length) {\n        const selectedBreed = catArr[idValue];\n        const markup = createMarkup(selectedBreed);\n        catInfo.innerHTML = markup;\n      } else {\n        // Если idValue недопустимо, вы можете сделать здесь обработку по умолчанию или ничего не делать\n      }\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n\n// Инициировать начальную загрузку пород при загрузке страницы\nfetchBreeds(0);\n\n// Определите функцию createMarkup для создания разметки породы\nfunction createMarkup(breed) {\n  const { url, width, height, name, temperament } = breed;\n  return `<ul>\n    <li>\n      <img src=\"${url}\" alt=\"${name}\" width=\"${width}\" height=\"${height}\">\n      <h1>${name}</h1>\n      <p></p>\n      <p><span style=\"font-weight: bold\"> Temperament:</span> ${temperament}</p>\n    </li>\n  </ul>`;\n}\n"],"names":["$1f0dc3b9307be026$var$breedSelect","document","querySelector","$1f0dc3b9307be026$var$catInfo","$1f0dc3b9307be026$var$fetchBreeds","idValue","fetch","then","response","json","catArr","innerHTML","i","length","breed","image","option","createElement","value","name","appendChild","markup","url","width","height","temperament","$1f0dc3b9307be026$var$createMarkup","catch","error1","console","error","addEventListener","evt","target"],"version":3,"file":"index.2472b162.js.map"}